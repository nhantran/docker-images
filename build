#!/bin/sh

show_help()
{
cat << EOF
usage: $0 options

This script is to build Docker images for a CI/CD system.

OPTIONS:
   -h|--help|-\?      Show this message
   -n|--name          Image name, is also the folder name of subfolders of docker-images
   -i|--ip            Software repository IP, where hosting offline softwares
   -d|--depend        The dependent tag that this image depends on
   -t|--tag           The tag of this image
EOF
}

# Reset all variables that might be set
IMAGE_NAME=
VERBOSE=0
SOFT_REPO_IP=172.17.42.1
DEPENDENT_VERSION=latest
TAG=latest

while :; do
  case $1 in
    -h|-\?|--help)   # Call a "show_help" function to display a synopsis, then exit.
      show_help
      exit
      ;;
    -n|--name)       # Takes an option argument, ensuring it has been specified.
      if [ "$2" ]; then
        IMAGE_NAME=$2
        shift 2
        continue
      else
        echo 'ERROR: Must specify a non-empty "--name IMAGENAME" argument.' >&2
        exit 1
      fi
      ;;
    --name=?*)
      IMAGE_NAME=${1#*=} # Delete everything up to "=" and assign the remainder.
      ;;
    --name=)         # Handle the case of an empty --file=
      echo 'ERROR: Must specify a non-empty "--file IMAGENAME" argument.' >&2
      exit 1
      ;;
    -i|--ip)       # Takes an option argument, ensuring it has been specified.
      if [ "$2" ]; then
        SOFT_REPO_IP=$2
        shift 2
        continue
      else
        echo 'WARN: Must specify a non-empty "--ip SOFT_REPO_IP" argument. Falling back to use the default IP' >&2
        continue
      fi
      ;;
    --ip=?*)
      SOFT_REPO_IP=${1#*=} # Delete everything up to "=" and assign the remainder.
      ;;
    --ip=)         # Handle the case of an empty --file=
      echo 'WARN: Must specify a non-empty "--ip SOFT_REPO_IP" argument. Falling back to use the default IP' >&2
      continue
      ;;
    -d|--depend)       # Takes an option argument, ensuring it has been specified.
      if [ "$2" ]; then
        DEPENDENT_VERSION=$2
        shift 2
        continue
      else
        echo 'WARN: Must specify a non-empty "--depend DEPENDENT_VERSION" argument. Falling back to use the "latest" version' >&2
        continue
      fi
      ;;
    --depend=?*)
      DEPENDENT_VERSION=${1#*=} # Delete everything up to "=" and assign the remainder.
      ;;
    --depend=)         # Handle the case of an empty --file=
      echo 'WARN: Must specify a non-empty "--depend DEPENDENT_VERSION" argument. Falling back to use the "latest" version' >&2
      continue
      ;;   
    -t|--tag)       # Takes an option argument, ensuring it has been specified.
      if [ "$2" ]; then
        TAG=$2
        shift 2
        continue
      else
        echo 'WARN: Must specify a non-empty "--tag TAG" argument. Falling back to use the "latest" tag' >&2
        continue
      fi
      ;;
    --tag=?*)
      TAG=${1#*=} # Delete everything up to "=" and assign the remainder.
      ;;
    --tag=)         # Handle the case of an empty --file=
      echo 'WARN: Must specify a non-empty "--tag TAG" argument. Falling back to use the "latest" tag' >&2
      continue
      ;;   
    -v|--verbose)
      VERBOSE=$((VERBOSE + 1)) # Each -v argument adds 1 to verbosity.
      ;;
    --)              # End of all options.
      shift
      break
      ;;
    -?*)
      printf 'WARN: Unknown option (ignored): %s\n' "$1" >&2
      ;;
    *)               # Default case: If no more options then break out of the loop.
      break
  esac
  shift
done

# Suppose --name is a required option. Check that it has been set.
if [ ! "$IMAGE_NAME" ]; then
  echo 'ERROR: option "--name IMAGENAME" not given. See --help.' >&2
  exit 1
fi

PASSWORD=Passw0rd

if [ "$TAG" = "latest" ]; then
  JDK_VERSION=1.6.0_45
else
  JDK_VERSION=$TAG
fi 

JENKINS_VERSION=1.549
JK_GIT_CLIENT_VERSION=1.10.0
JK_SCM_API_VERSION=0.2
JK_GIT_VERSION=2.2.2
JK_ARTIFACTORY_VERSION=2.2.3
JK_SONAR_VERSION=2.1

SONARQUBE_VERSION=4.1.2

ARTIFACTORY_VERSION=3.2.2

GITLAB_FQDN=gitlab
GITLAB_EMAIL_FROM=tranphanquocnhan@gmail.com

CASSANDRA_VERSION=2.0.9
JNA_VERSION=4.1.0
OPSCENTER_VERSION=5.0.0
 
sed -r -e "s/\{\{DEPENDENT_VERSION\}\}/$DEPENDENT_VERSION/g" $IMAGE_NAME/Dockerfile.template > $IMAGE_NAME/Dockerfile

sed -i -e "s/{{PASSWORD}}/$PASSWORD/g" $IMAGE_NAME/Dockerfile

sed -i -e "s/{{SOFT_REPO_IP}}/$SOFT_REPO_IP/g" $IMAGE_NAME/Dockerfile

sed -i -e "s/{{JDK_VERSION}}/$JDK_VERSION/g" $IMAGE_NAME/Dockerfile

sed -i -e "s/{{JENKINS_VERSION}}/$JENKINS_VERSION/g" $IMAGE_NAME/Dockerfile
sed -i -e "s/{{JK_GIT_CLIENT_VERSION}}/$JK_GIT_CLIENT_VERSION/g" $IMAGE_NAME/Dockerfile
sed -i -e "s/{{JK_SCM_API_VERSION}}/$JK_SCM_API_VERSION/g" $IMAGE_NAME/Dockerfile
sed -i -e "s/{{JK_GIT_VERSION}}/$JK_GIT_VERSION/g" $IMAGE_NAME/Dockerfile
sed -i -e "s/{{JK_ARTIFACTORY_VERSION}}/$JK_ARTIFACTORY_VERSION/g" $IMAGE_NAME/Dockerfile
sed -i -e "s/{{JK_SONAR_VERSION}}/$JK_SONAR_VERSION/g" $IMAGE_NAME/Dockerfile

sed -i -e "s/{{SONARQUBE_VERSION}}/$SONARQUBE_VERSION/g" $IMAGE_NAME/Dockerfile

sed -i -e "s/{{ARTIFACTORY_VERSION}}/$ARTIFACTORY_VERSION/g" $IMAGE_NAME/Dockerfile

sed -i -e "s/{{GITLAB_FQDN}}/$GITLAB_FQDN/g" $IMAGE_NAME/Dockerfile
sed -i -e "s/{{GITLAB_EMAIL_FROM}}/$GITLAB_EMAIL_FROM/g" $IMAGE_NAME/Dockerfile

sed -i -e "s/{{CASSANDRA_VERSION}}/$CASSANDRA_VERSION/g" $IMAGE_NAME/Dockerfile
sed -i -e "s/{{JNA_VERSION}}/$JNA_VERSION/g" $IMAGE_NAME/Dockerfile

sed -i -e "s/{{OPSCENTER_VERSION}}/$OPSCENTER_VERSION/g" $IMAGE_NAME/Dockerfile

cat $IMAGE_NAME/Dockerfile

docker build -t nhantran/$IMAGE_NAME:$TAG $IMAGE_NAME/

# Cleanup temporary files
rm -f $IMAGE_NAME/Dockerfile
